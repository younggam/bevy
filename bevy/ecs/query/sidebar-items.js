window.SIDEBAR_ITEMS = {"derive":[["WorldQuery","Implement `WorldQuery` to use a struct as a parameter in a query"]],"enum":[["QueryEntityError","An error that occurs when retrieving a specific [`Entity`]â€™s query result."],["QuerySingleError","An error that occurs when evaluating a [`QueryState`] as a single expected resulted via [`QueryState::single`] or [`QueryState::single_mut`]."]],"struct":[["Access","Tracks read and write access to specific elements in a collection."],["Added","A filter on a component that only retains results added after the system last ran."],["AnyOf","The `AnyOf` query parameter fetches entities with any of the component types included in T."],["ChangeTrackers","[`WorldQuery`] that tracks changes and additions for component `T`."],["Changed","A filter on a component that only retains results added or mutably dereferenced after the system last ran."],["FilteredAccess","An [`Access`] that has been filtered to include and exclude certain combinations of elements."],["FilteredAccessSet","A collection of [`FilteredAccess`] instances."],["NopWorldQuery","[`WorldQuery`] used to nullify queries by turning `Query<Q>` into `Query<NopWorldQuery<Q>>`"],["Or","A filter that tests if any of the given filters apply."],["QueryCombinationIter","An iterator over `K`-sized combinations of query items without repetition."],["QueryIter","An [`Iterator`] over query results of a `Query`."],["QueryManyIter","An [`Iterator`] over the query items generated from an iterator of [`Entity`]s."],["QueryState","Provides scoped access to a [`World`] state according to a given [`WorldQuery`] and query filter."],["With","Filter that selects entities with a component `T`."],["Without","Filter that selects entities without a component `T`."]],"trait":[["ArchetypeFilter","A marker trait to indicate that the filter works at an archetype level."],["ReadOnlyWorldQuery","A world query that is read only."],["WorldQuery","Types that can be fetched from a [`World`] using a `Query`."]],"type":[["QueryFetch","The `Fetch` of a [`WorldQuery`], which is used to store state for each archetype/table."],["QueryItem","The item type returned when a [`WorldQuery`] is iterated over"],["ROQueryFetch","The read-only `Fetch` of a [`WorldQuery`], which is used to store state for each archetype/table."],["ROQueryItem","The read-only variant of the item type returned when a [`WorldQuery`] is iterated over immutably"]]};