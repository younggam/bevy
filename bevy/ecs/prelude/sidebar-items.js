window.SIDEBAR_ITEMS = {"derive":[["Bundle",""],["Component",""],["Resource",""],["RunCriteriaLabel","Generates an impl of the `RunCriteriaLabel` trait."],["StageLabel","Generates an impl of the `StageLabel` trait."],["SystemLabel","Generates an impl of the `SystemLabel` trait."]],"fn":[["dbg","System adapter that utilizes the [`bevy_utils::tracing::debug!`] macro to print the output of a system."],["error","System adapter that utilizes the [`bevy_utils::tracing::error!`] macro to print the output of a system."],["ignore","System adapter that ignores the output of the previous system in a pipe. This is useful for fallible systems that should simply return early in case of an `Err`/`None`."],["info","System adapter that utilizes the [`bevy_utils::tracing::info!`] macro to print system information."],["unwrap","System adapter that unwraps the `Ok` variant of a [`Result`]. This is useful for fallible systems that should panic in the case of an error."],["warn","System adapter that utilizes the [`bevy_utils::tracing::warn!`] macro to print the output of a system."]],"struct":[["Added","A filter on a component that only retains results added after the system last ran."],["AnyOf","The `AnyOf` query parameter fetches entities with any of the component types included in T."],["ChangeTrackers","[`WorldQuery`] that tracks changes and additions for component `T`."],["Changed","A filter on a component that only retains results added or mutably dereferenced after the system last ran."],["Commands","A [`Command`] queue to perform impactful changes to the [`World`]."],["Entity","Lightweight identifier of an entity."],["EventReader","Reads events of type `T` in order and tracks which events have already been read."],["EventWriter","Sends events of type `T`."],["Events","An event collection that represents the events that occurred within the last two [`Events::update`] calls. Events can be written to using an [`EventWriter`] and are typically cheaply read using an [`EventReader`]."],["In","Wrapper type to mark a [`SystemParam`] as an input."],["Local","A system local [`SystemParam`]."],["Mut","Unique mutable borrow of an entityâ€™s component"],["NonSend","Shared borrow of a non-[`Send`] resource."],["NonSendMut","Unique borrow of a non-[`Send`] resource."],["Or","A filter that tests if any of the given filters apply."],["ParallelCommands","An alternative to [`Commands`] that can be used in parallel contexts, such as those in `Query::par_for_each`"],["ParamSet",""],["Query","System parameter that provides selective access to the [`Component`] data stored in a [`World`]."],["QueryState","Provides scoped access to a [`World`] state according to a given [`WorldQuery`] and query filter."],["ReflectComponent","A struct used to operate on reflected [`Component`] of a type."],["ReflectResource","A struct used to operate on reflected [`Resource`] of a type."],["RemovedComponents","A [`SystemParam`] that grants access to the entities that had their `T` [`Component`] removed."],["Res","Shared borrow of a [`Resource`]."],["ResMut","Unique mutable borrow of a [`Resource`]."],["RunCriteria",""],["Schedule","A container of [`Stage`]s set to be run in a linear order."],["State","Stack based state machine"],["SystemSet","A builder for describing several systems at the same time."],["SystemStage","Stores and executes systems. Execution order is not defined unless explicitly specified; see `SystemDescriptor` documentation."],["With","Filter that selects entities with a component `T`."],["Without","Filter that selects entities without a component `T`."],["World","Stores and exposes operations on entities, components, resources, and their associated metadata."]],"trait":[["Bundle","The `Bundle` trait enables insertion and removal of [`Component`]s from an entity."],["Component","A data type that can be used to store data for an entity."],["DetectChanges","Types that implement reliable change detection."],["FromWorld","Creates an instance of the type this trait is implemented for using data from the supplied [World]."],["IntoPipeSystem","An extension trait providing the [`IntoPipeSystem::pipe`] method to pass input from one system into the next."],["IntoSystem","Conversion trait to turn something into a [`System`]."],["IntoSystemDescriptor",""],["Resource","A type that can be inserted into a [`World`] as a singleton."],["RunCriteriaDescriptorCoercion",""],["RunCriteriaLabel","A strongly-typed class of labels used to identify run criteria."],["Stage","A type that can run as a step of a `Schedule`."],["StageLabel","A strongly-typed class of labels used to identify `Stage`s."],["System","An ECS system that can be added to a `Schedule`"],["SystemLabel","A strongly-typed class of labels used to identify `System`s."],["SystemParamFunction","A trait implemented for all functions that can be used as [`System`]s."]]};