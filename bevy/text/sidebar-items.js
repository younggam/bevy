window.SIDEBAR_ITEMS = {"enum":[["HorizontalAlign","Describes horizontal alignment preference for positioning & bounds."],["TextError",""],["VerticalAlign","Describes vertical alignment preference for positioning & bounds. Currently a placeholder for future functionality."],["YAxisOrientation","Text is rendered for two different view projections, normal `Text2DBundle` is rendered with a `BottomToTop` y axis, and UI is rendered with a `TopToBottom` y axis. This matters for text because the glyph positioning is different in either layout."]],"fn":[["extract_text2d_sprite",""],["scale_value",""],["update_text2d_layout","Updates the layout and size information whenever the text or style is changed. This information is computed by the `TextPipeline` on insertion, then stored."]],"mod":[["prelude",""]],"struct":[["Font",""],["FontAtlas",""],["FontAtlasSet",""],["FontAtlasWarning",""],["FontLoader",""],["GlyphAtlasInfo",""],["GlyphBrush",""],["PositionedGlyph",""],["SubpixelOffset",""],["Text",""],["Text2dBounds","The maximum width and height of text. The text will wrap according to the specified size. Characters out of the bounds after wrapping will be truncated. Text is aligned according to the specified `TextAlignment`."],["Text2dBundle","The bundle of components needed to draw text in a 2D scene via a 2D `Camera2dBundle`. Example usage."],["Text2dSize","The calculated size of text drawn in 2D scene."],["TextAlignment",""],["TextLayoutInfo","Render information for a corresponding `Text` component."],["TextPipeline",""],["TextPlugin",""],["TextSection",""],["TextSettings","[`TextPlugin`] settings"],["TextStyle",""]]};