window.SIDEBAR_ITEMS = {"constant":[["CLUSTERED_FORWARD_HANDLE",""],["CLUSTERED_FORWARD_STORAGE_BUFFER_COUNT",""],["MAX_DIRECTIONAL_LIGHTS",""],["MAX_UNIFORM_BUFFER_POINT_LIGHTS",""],["MESH_BINDINGS_HANDLE",""],["MESH_FUNCTIONS_HANDLE",""],["MESH_SHADER_HANDLE",""],["MESH_TYPES_HANDLE",""],["MESH_VERTEX_OUTPUT",""],["MESH_VIEW_BINDINGS_HANDLE",""],["MESH_VIEW_TYPES_HANDLE",""],["PBR_BINDINGS_SHADER_HANDLE",""],["PBR_FUNCTIONS_HANDLE",""],["PBR_LIGHTING_HANDLE",""],["PBR_SHADER_HANDLE",""],["PBR_TYPES_SHADER_HANDLE",""],["SHADOWS_HANDLE",""],["SHADOW_FORMAT",""],["SHADOW_SHADER_HANDLE",""],["SKINNING_HANDLE",""],["UTILS_HANDLE",""]],"enum":[["AlphaMode","Sets how a material’s base color alpha channel is used for transparency."],["ClusterConfig","Configuration of the clustering strategy for clustered forward rendering"],["ClusterFarZMode","Configure the far z-plane mode used for the furthest depth slice for clustered forward rendering"],["GpuPointLights",""],["LightEntity",""],["RenderLightSystems",""],["SimulationLightSystems",""]],"fn":[["add_clusters",""],["calculate_cluster_factors",""],["check_light_mesh_visibility",""],["extract_clusters",""],["extract_lights",""],["extract_meshes",""],["extract_skinned_meshes",""],["prepare_clusters",""],["prepare_lights",""],["prepare_skinned_meshes",""],["queue_material_meshes",""],["queue_mesh_bind_group",""],["queue_mesh_view_bind_groups",""],["queue_shadow_view_bind_group",""],["queue_shadows",""],["update_directional_light_frusta",""],["update_point_light_frusta",""],["update_spot_light_frusta",""]],"mod":[["draw_3d_graph",""],["prelude",""],["wireframe",""]],"struct":[["AmbientLight","An ambient light, which lights the entire scene equally."],["ClusterZConfig","Configure the depth-slicing strategy for clustered forward rendering"],["Clusters",""],["CubemapVisibleEntities",""],["DirectionalLight","A Directional light."],["DirectionalLightBundle","A component bundle for [`DirectionalLight`] entities."],["DirectionalLightShadowMap","Controls the resolution of [`DirectionalLight`] shadow maps."],["DrawMesh",""],["ExtractedClusterConfig",""],["ExtractedClustersPointLights",""],["ExtractedDirectionalLight",""],["ExtractedJoints",""],["ExtractedPointLight",""],["GlobalLightMeta",""],["GlobalVisiblePointLights",""],["GpuDirectionalLight",""],["GpuLights",""],["GpuPointLight",""],["GpuPointLightsStorage",""],["GpuPointLightsUniform",""],["LightMeta",""],["MaterialMeshBundle","A component bundle for entities with a [`Mesh`] and a [`Material`]."],["MaterialPipeline","Render pipeline data for a given [`Material`]."],["MaterialPipelineKey","A key uniquely identifying a specialized [`MaterialPipeline`]."],["MaterialPlugin","Adds the necessary ECS resources and render logic to enable rendering entities using the given [`Material`] asset type."],["MaterialProperties","Common [`Material`] properties, calculated for a specific material instance."],["MeshBindGroup",""],["MeshPipeline",""],["MeshPipelineKey","MSAA uses the highest 3 bits for the MSAA log2(sample count) to support up to 128x MSAA."],["MeshRenderPlugin",""],["MeshUniform",""],["MeshViewBindGroup",""],["NotShadowCaster","Add this component to make a `Mesh` not cast shadows."],["NotShadowReceiver","Add this component to make a `Mesh` not receive shadows."],["PbrPlugin","Sets up the entire PBR infrastructure of bevy."],["PointLight","A light that emits light in all directions from a central point."],["PointLightBundle","A component bundle for [`PointLight`] entities."],["PointLightShadowMap",""],["PrepareNextFrameMaterials","All [`Material`] values of a given type that should be prepared next frame."],["PreparedMaterial","Data prepared for a [`Material`] instance."],["RenderMaterials","Stores all prepared representations of [`Material`] assets for as long as they exist."],["SetMaterialBindGroup","Sets the bind group for a given [`Material`] at the configured `I` index."],["SetMeshBindGroup",""],["SetMeshViewBindGroup",""],["SetShadowViewBindGroup",""],["Shadow",""],["ShadowPassNode",""],["ShadowPipeline",""],["ShadowPipelineKey",""],["ShadowView",""],["SkinnedMeshJoints",""],["SkinnedMeshUniform",""],["SpotLight","A light that emits light in a given direction from a central point. Behaves like a point light in a perfectly absorbant housing that shines light only in a given direction. The direction is taken from the transform, and can be specified with `Transform::looking_at`."],["SpotLightBundle","A component bundle for spot light entities"],["StandardMaterial","A material with “standard” properties used in PBR lighting Standard property values with pictures here https://google.github.io/filament/Material%20Properties.pdf."],["StandardMaterialFlags","Bitflags info about the material a shader is currently rendering. This is accessible in the shader in the [`StandardMaterialUniform`]"],["StandardMaterialKey",""],["StandardMaterialUniform","The GPU representation of the uniform data of a [`StandardMaterial`]."],["ViewClusterBindings",""],["ViewLightEntities",""],["ViewLightsUniformOffset",""],["ViewShadowBindings",""],["VisiblePointLights",""]],"trait":[["Material","Materials are used alongside [`MaterialPlugin`] and `MaterialMeshBundle` to spawn entities that are rendered with a specific [`Material`] type. They serve as an easy to use high level way to render [`Mesh`] entities with custom shader logic."]],"type":[["DrawShadowMesh",""],["PbrBundle","A component bundle for PBR entities with a [`Mesh`] and a [`StandardMaterial`]."]]};